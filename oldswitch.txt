switch (mode) {
        case DAILY:
            String path = plugin.getDataFolder().getAbsolutePath() + File.separator + "messages";
            boolean groupOnlyExists = false;
            boolean worldOnlyExists = false;
            boolean groupAndWorldExists = false;
            // Daily MOTD check
            if (config.isGroupSpecific()) {
                if (group != null)
                    groupOnlyExists = new File(path + File.separator + group, "motd_" + month + "_" + day + ".txt").exists();
            }
            if (config.isWorldSpecific()) {
                worldOnlyExists = new File(path + File.separator + world, "motd_" + month + "_" + day + ".txt").exists();
            }
            if (config.isWorldSpecific() && config.isGroupSpecific()) {
                groupAndWorldExists = new File(path + File.separator + group + File.separator + world, "motd_" + month + "_" + day + ".txt").exists();
            }
            if (groupAndWorldExists) {
                return new File(path + File.separator + group + File.separator + world, "motd_" + month + "_" + day + ".txt");
            } else if (groupOnlyExists) {
                return new File(path + File.separator + group, "motd_" + month + "_" + day + ".txt");
            } else if (worldOnlyExists) {
                return new File(path + File.separator + world, "motd_" + month + "_" + day + ".txt");
            }
            groupOnlyExists = false;
            worldOnlyExists = false;
            groupAndWorldExists = false;
            // Default MOTD check
            if (config.isGroupSpecific()) {
                if (group != null)
                    groupOnlyExists = new File(path + File.separator + group, "motd.txt").exists();
            }
            if (config.isWorldSpecific()) {
                worldOnlyExists = new File(path + File.separator + world, "motd.txt").exists();
            }
            if (config.isWorldSpecific() && config.isGroupSpecific()) {
                groupAndWorldExists = new File(path + File.separator + group + File.separator + world, "motd.txt").exists();
            }
            if (groupAndWorldExists) {
                return new File(path + File.separator + group + File.separator + world, "motd.txt");
            } else if (groupOnlyExists) {
                return new File(path + File.separator + group, "motd.txt");
            } else if (worldOnlyExists) {
                return new File(path + File.separator + world, "motd.txt");
            }
            break;
        case SINGLE:
            path = plugin.getDataFolder().getAbsolutePath() + File.separator + "messages";
            groupOnlyExists = false;
            worldOnlyExists = false;
            groupAndWorldExists = false;
            if (config.isGroupSpecific()) {
                if (group != null)
                    groupOnlyExists = new File(path + File.separator + group, "motd.txt").exists();
            }
            if (config.isWorldSpecific()) {
                worldOnlyExists = new File(path + File.separator + world, "motd.txt").exists();
            }
            if (config.isWorldSpecific() && config.isGroupSpecific()) {
                groupAndWorldExists = new File(path + File.separator + group + File.separator + world, "motd.txt").exists();
            }
            if (groupAndWorldExists) {
                return new File(path + File.separator + group + File.separator + world, "motd.txt");
            } else if (groupOnlyExists) {
                return new File(path + File.separator + group, "motd.txt");
            } else if (worldOnlyExists) {
                return new File(path + File.separator + world, "motd.txt");
            }
            return getDefaultMotdFile();
        case RANDOM:
            ArrayList<File> files = new ArrayList<File>();
            if (config.isGroupSpecific() && config.isWorldSpecific()) {
                files.addAll(Arrays.asList(new File(plugin.getDataFolder() + File.separator + "messages" + File.separator + group + File.separator + world).listFiles(new FilenameFilter() {
                    @Override
                    public boolean accept(File dir, String name) {
                        return name.endsWith(".txt");
                    }
                })));
            }
            if (files.size() > 0) {
                return files.get(rand.nextInt(files.size()));
            }
            if (config.isGroupSpecific()) {
                files.addAll(Arrays.asList(new File(plugin.getDataFolder() + File.separator + "messages" + File.separator + group).listFiles(new FilenameFilter() {
                    @Override
                    public boolean accept(File dir, String name) {
                        return name.endsWith(".txt");
                    }
                })));
            }
            if (files.size() > 0) {
                return files.get(rand.nextInt(files.size()));
            }
            if (config.isWorldSpecific()) {
                files.addAll(Arrays.asList(new File(plugin.getDataFolder() + File.separator + "messages" + File.separator + world).listFiles(new FilenameFilter() {
                    @Override
                    public boolean accept(File dir, String name) {
                        return name.endsWith(".txt");
                    }
                })));
            }
            if (files.size() > 0) {
                return files.get(rand.nextInt(files.size()));
            }
            files.addAll(Arrays.asList(new File(plugin.getDataFolder() + File.separator + "messages").listFiles(new FilenameFilter() {

                @Override
                public boolean accept(File dir, String name) {
                    return name.endsWith(".txt");
                }
            })));
            if (files.size() > 0) {
                return files.get(rand.nextInt(files.size()));
            }
            break;
        }